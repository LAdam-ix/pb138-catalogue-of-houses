datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id    String @id @default(uuid())
  email String @unique

  name     String
  surename String
  avatar   String?

  hashedPassword String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  houses House[]

  ordersPlaced   Order[] @relation(name: "ordersPlaced")
  ordersReceived Order[] @relation(name: "ordersReceived")

  ratingsAdded    Rating[] @relation(name: "ratingsAdded")
  ratingsReceived Rating[] @relation(name: "ratingsReceived")

  typeRef AccountType @relation(fields: [type], references: [type])
  type    String
}

model AccountType {
  type    String    @id
  records Account[]
}

model House {
  id String @id @default(uuid())

  typeRef HouseType @relation(fields: [type], references: [type])
  type    String

  pictureLink String
  modelLink   String

  name        String
  cost        Float
  description String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  designerId String
  designer   Account @relation(fields: [designerId], references: [id])
  
  Order      Order[]
}

model HouseType {
  type    String  @id
  records House[]
  // FAMILY_HOUSE
  // BUNGALOW
  // APARTMENT
  // COTTAGE
  // MANSION
}

model Order {
  id String @id @default(uuid())

  price   Float
  location String
  houseId String
  house   House  @relation(fields: [houseId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  customerId String
  customer   Account @relation(name: "ordersPlaced", fields: [customerId], references: [id])

  designerId String
  designer   Account @relation(name: "ordersReceived", fields: [designerId], references: [id])
}

model Rating {
  id String @id @default(uuid())

  score   Int
  comment String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  customerId String
  customer   Account @relation(name: "ratingsAdded", fields: [customerId], references: [id])

  designerId String
  designer   Account @relation(name: "ratingsReceived", fields: [designerId], references: [id])
}
